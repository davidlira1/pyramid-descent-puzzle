{"version":3,"sources":["components/pyramid-block/pyramid-block.component.jsx","components/pyramid-level/pyramid-level.component.jsx","components/pyramid/pyramid.component.jsx","components/left-panel/left-panel.component.jsx","components/middle-panel/middle-panel.component.jsx","components/right-panel/right-panel.component.jsx","components/good-job/good-job.component.jsx","levels/levels.js","solver/pyramidDescentSolver.js","solver/productForStepsTaken.js","App.js","reportWebVitals.js","index.js"],"names":["PyramidBlock","row","col","node","handleClickBlock","bottomBorder","rightBorder","className","clicked","onClick","ev","value","PyramidLevel","rowValues","map","idx","length","Pyramid","pyramidValues","LeftPanel","MiddlePanel","props","children","RightPanel","target","steps","solved","handleSubmit","handleNextPuzzle","wrongAnswer","handleTryAgain","GoodJob","levels","values","pyramidDescentSolver","pyramid","stack","product","depth","n","pop","push","console","log","productForStepsTaken","i","App","state","level","setState","nextLevel","newPyramidValues","newC","solvedAll","bind","this","rowIdx","colIdx","prevColIdx","reduce","alloc","newSteps","rIdx","cIdx","substring","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51083365.chunk.js","sourcesContent":["import React from 'react';\r\nimport './pyramid-block.styles.scss';\r\n\r\nvar PyramidBlock = ({row, col, node, handleClickBlock, bottomBorder, rightBorder}) => (\r\n    <div \r\n        className={`pyramid-block ${node.clicked ? 'clicked' : ''} ${bottomBorder ? 'bottom-border' : null} ${rightBorder ? 'right-border': null}`} \r\n        onClick={(ev) => handleClickBlock(row, col)}\r\n    >\r\n        {node.value}\r\n    </div>\r\n)\r\n\r\nexport default PyramidBlock;","import React from 'react';\r\nimport './pyramid-level.styles.scss';\r\nimport PyramidBlock from '../pyramid-block/pyramid-block.component';\r\n\r\nvar PyramidLevel = ({row, rowValues, handleClickBlock, bottomBorder}) => (\r\n    <div className=\"pyramid-level\">\r\n        {rowValues.map((node, idx) => (\r\n            <PyramidBlock \r\n                row={row}\r\n                col={idx} \r\n                node={node} \r\n                handleClickBlock={handleClickBlock}\r\n                bottomBorder={bottomBorder}\r\n                rightBorder={idx === rowValues.length - 1}\r\n            />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default PyramidLevel;","import React from 'react';\r\nimport './pyramid.styles.scss';\r\nimport PyramidLevel from '../pyramid-level/pyramid-level.component'\r\n\r\nvar Pyramid = ({pyramidValues, handleClickBlock}) => (\r\n    <div className=\"pyramid\">\r\n        {pyramidValues.map((row, idx) => \r\n            <PyramidLevel \r\n                row={idx}\r\n                rowValues={row} \r\n                handleClickBlock={handleClickBlock}\r\n                bottomBorder={idx === pyramidValues.length - 1}\r\n            />\r\n        )}\r\n    </div>\r\n)\r\n\r\nexport default Pyramid;","import React from 'react';\r\nimport './left-panel.styles.scss';\r\n\r\nvar LeftPanel = () => (\r\n    <div className=\"left-panel\">\r\n        <h1>Pyramid Descent Puzzle</h1>\r\n        <p>To solve the puzzle, you must find a path that traverses the pyramid from top to bottom visiting numbers whose overall product is the given target value.</p>\r\n        <p>Each step in the path must go down one row, and go either one step to the left or one step to the right.</p>\r\n        <p>The top box begins your path. Click on a box on the next row to continue, and repeat until you reach the bottom.</p>\r\n    </div>\r\n)\r\n\r\nexport default LeftPanel;","import React from 'react';\r\nimport './middle-panel.styles.scss';\r\n\r\n\r\nvar MiddlePanel = (props) => (\r\n    <div className=\"middle-panel\">\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default MiddlePanel;","import React from 'react';\r\nimport './right-panel.styles.scss';\r\n\r\nvar RightPanel = ({target, steps, length, solved, handleSubmit, handleNextPuzzle, wrongAnswer, handleTryAgain}) => (\r\n    <div className=\"right-panel\">\r\n        <div className=\"product\">Product</div>\r\n        <div className=\"target\">{target}</div>\r\n        {steps.length === length - 1 \r\n            ? \r\n            <button \r\n                onClick={handleSubmit}\r\n            >\r\n                Submit\r\n            </button> \r\n            : null\r\n        }\r\n        {\r\n            solved === 'tryAgain' || solved === 'yes' \r\n            ? \r\n            <button\r\n                onClick={solved === 'yes' ? handleNextPuzzle : solved === 'tryAgain' ? handleTryAgain : null}\r\n            >\r\n                {solved === 'tryAgain' ? `Try Again` : 'Next Puzzle!'}\r\n            </button>\r\n            : null \r\n        }\r\n        {\r\n            solved === 'tryAgain' \r\n            ?\r\n            <p>{`Your product is ${wrongAnswer}`}</p>\r\n            :\r\n            null\r\n        }\r\n\r\n    </div>\r\n)\r\n\r\nexport default RightPanel;","import React from 'react';\r\nimport './good-job.styles.scss';\r\n\r\nvar GoodJob = () => (\r\n    <div className=\"good-job\">\r\n        <p>You solved all!</p>\r\n        <p>Good Job!!</p>\r\n    </div>\r\n)\r\n\r\nexport default GoodJob;","var levels = [\r\n    {values: [[1], [2,3], [4,1,1]], target: 2},\r\n\r\n    {values: [[7],[4,5],[5,4,3],[1,2,2,1]], target: 105},\r\n\r\n    {values: [[2],[4,3],[3,2,6],[2,9,5,2],[10,5,2,15,5]], target: 720},\r\n\r\n    {values: [[3],[7,6],[1,8,4],[4,6,2,5],[5,7,9,2,3]], target: 1296},\r\n\r\n    {values: [[4],[7,4],[7,3,2],[5,9,6,8],[5,8,2,9,6]], target: 3528},\r\n\r\n];\r\n\r\nexport default levels;","/**\r\n * \r\n * @param {number} target The product that we want to achieve by traversing thru the pyramid\r\n * @param {array} pyramid A multi-dimensional array that will be traversed\r\n * @return {string} A string composed of R and/or L characters\r\n */\r\n\r\nvar pyramidDescentSolver = (target, pyramid) => {\r\n\r\n    var stack = [{steps: '', product: 1, depth: 0, idx: 0}];\r\n\r\n    while(stack.length) {\r\n        var n = stack.pop();\r\n\r\n        n.product*= pyramid[n.depth][n.idx];\r\n        if(n.depth === pyramid.length - 1) {\r\n            if(n.product === target) return n.steps;\r\n        } else {\r\n            stack.push({steps: n.steps + 'L', product: n.product, depth: n.depth + 1, idx: n.idx});\r\n            stack.push({steps: n.steps + 'R', product: n.product, depth: n.depth + 1, idx: n.idx + 1});\r\n        }\r\n    }\r\n\r\n    \r\n    // var recurse = (steps, product, depth, idx) => {\r\n    //     console.log(steps, product, depth, idx);\r\n    //     product*= pyramid[depth][idx];\r\n\r\n    //     if(depth === pyramid.length - 1) {\r\n    //         if(product === target) console.log('FOUND IT');\r\n    //         return product === target ? steps : false;\r\n    //     }\r\n\r\n    //     var result;\r\n    //     result = recurse(steps + \"L\", product, depth + 1, idx);\r\n    //     if(result) return result;\r\n    //     result = recurse(steps + \"R\", product, depth + 1, idx + 1);\r\n    //     if(result) return result;\r\n    //     return false;\r\n    // }\r\n\r\n    // var steps = recurse('', 1, 0, 0);\r\n\r\n    // return steps;\r\n}\r\n\r\nconsole.log(pyramidDescentSolver(720, [[2],[4,3],[3,2,6],[2,9,5,2],[10,5,2,15,5]]));\r\n\r\nexport default pyramidDescentSolver;","var productForStepsTaken = (steps, pyramidValues) => {\r\n    console.log('steps', steps, 'pyramidValues', pyramidValues);\r\n    var product = pyramidValues[0][0];\r\n    console.log('product', product);\r\n    var col = 0;\r\n    for(var i = 0; i < steps.length; i++) {\r\n        col = steps[i] === \"L\" ? col : col + 1;\r\n        product*= pyramidValues[i + 1][col];\r\n    }\r\n   \r\n    return product;\r\n}\r\n\r\nexport default productForStepsTaken;","import React from 'react';\nimport './App.css';\nimport Pyramid from './components/pyramid/pyramid.component';\nimport LeftPanel from './components/left-panel/left-panel.component';\nimport MiddlePanel from './components/middle-panel/middle-panel.component';\nimport RightPanel from './components/right-panel/right-panel.component';\nimport GoodJob from './components/good-job/good-job.component';\nimport levels from './levels/levels.js';\nimport pyramidDescentSolver from './solver/pyramidDescentSolver';\nimport productForStepsTaken from './solver/productForStepsTaken';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      steps: '',\n      pyramidValues: [[]],\n      target: 0,\n      level: 0,\n      solved: false,\n      solvedAll: false,\n      wrongAnswer: 0\n    }\n    this.handleClickBlock = this.handleClickBlock.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNextPuzzle = this.handleNextPuzzle.bind(this);\n    this.handleTryAgain = this.handleTryAgain.bind(this);\n  }\n\n  componentDidMount() {\n    this.nextLevel();\n  }\n\n  nextLevel() {\n    if(this.state.level === levels.length) {\n      this.setState({solvedAll: true})\n      return;\n    } \n    var level = this.state.level + 1;\n    var pyramidValues = levels[level - 1].values.map(row => row.map(col => {return {value: col, clicked: false}}));\n    pyramidValues[0][0].clicked = true;\n    var target = levels[level - 1].target;\n    var solved = 'no';\n    var steps = '';\n    this.setState({pyramidValues,target, level, solved, steps});\n  }\n\n  handleClickBlock(rowIdx, colIdx) {\n    console.log(rowIdx, colIdx)\n\n    //IF TOP BOX IS CLICKED, RETURN\n    if(rowIdx === 0) return;\n\n    //IF BOX THAT IS CLICKED IS NOT IN THE LAST ROW THAT WAS CLICKED, \n    //OR IN THE ROW AFTER IT, RETURN\n    if(rowIdx !== this.state.steps.length && rowIdx !== this.state.steps.length + 1) return;\n\n    //IF BOX THAT IS CLICKED IS NOT DIRECTLY\n    //TO THE LEFT OR RIGHT OF THE PREVIOUS CLICKED BOX, RETURN\n    var prevColIdx = this.state.pyramidValues[rowIdx - 1].reduce((alloc, node, idx) => node.clicked ? idx : alloc, -1);\n    console.log('prevColIdx', prevColIdx);\n    if(colIdx !== prevColIdx && colIdx !== prevColIdx + 1) return;\n\n    //IF THERE IS ALREADY A CLICKED BOX ON THAT ROW, RETURN\n    if(this.state.pyramidValues[rowIdx].reduce((alloc, node, idx) => node.clicked && idx !== colIdx ? true : alloc, false)) return;\n\n    //CREATE A NEW STRING FOR STEPS\n    var newSteps = this.state.steps;\n\n    //CREATE A NEW PYRAMIDVALUES 2D ARRAY WITH THE CLICKED VALUE OF THE BOX TOGGLED\n    var newPyramidValues = this.state.pyramidValues.map((row, rIdx)  => {\n      return row.map((col, cIdx) => {\n        var newC = {...col};\n        // console.log('rIdx', rIdx, 'cIdx', cIdx, 'row', rowIdx, 'col', colIdx);\n        if(rIdx === rowIdx && cIdx === colIdx) {\n          newC.clicked = !newC.clicked;\n          if(newC.clicked) {\n            newSteps+= colIdx === prevColIdx ? \"L\" : \"R\";\n          } else {\n            newSteps = newSteps.substring(0, newSteps.length - 1);\n          }\n        }\n        return newC;\n      })\n    })\n\n    this.setState({\n      pyramidValues: newPyramidValues,\n      steps: newSteps,\n      solved: 'no'\n    })\n\n  }\n\n  handleSubmit = () => {\n    console.log('came in to check answer');\n    var pyramidValues = levels[this.state.level - 1].values;\n    var result = pyramidDescentSolver(this.state.target, pyramidValues);\n    if(result === this.state.steps) {\n      this.setState({solved: 'yes'});\n    } else {\n      //DETERMINE WHAT THE PRODUCT IS FOR THE STEPS TAKEN\n      var wrongAnswer = productForStepsTaken(this.state.steps, levels[this.state.level - 1].values);\n      this.setState({solved: 'tryAgain', wrongAnswer});\n    }\n  }\n\n  handleNextPuzzle = () => {\n    this.nextLevel();\n  }\n\n  handleTryAgain = () => {\n    var newPyramidValues = this.state.pyramidValues.map(row => {\n      return row.map(col => {\n        var newC = {...col};\n        newC.clicked = false;\n        return newC\n      })\n    });\n    newPyramidValues[0][0].clicked = true;\n    this.setState({\n      pyramidValues: newPyramidValues, \n      steps: '', \n      solved: 'no'\n    });\n  }\n\n  render() {\n    return (\n      this.state.solvedAll \n      ? \n      <div className=\"App\">\n        <GoodJob />\n      </div>\n      :\n      <div className=\"App\"> \n        <LeftPanel />\n        <MiddlePanel>\n          <Pyramid \n            pyramidValues={this.state.pyramidValues} \n            handleClickBlock={this.handleClickBlock}/>\n        </MiddlePanel>\n        <RightPanel \n          target={this.state.target} \n          steps={this.state.steps} \n          length={this.state.pyramidValues.length}\n          solved={this.state.solved}\n          handleSubmit={this.handleSubmit}\n          handleNextPuzzle={this.handleNextPuzzle}\n          handleTryAgain={this.handleTryAgain}\n          wrongAnswer={this.state.wrongAnswer}\n        />\n      </div>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}